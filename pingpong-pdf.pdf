
%PDF-1.6

1 0 obj
  <<
    /Pages 2 0 R
    /OpenAction 30 0 R
    /AcroForm <<
      /Fields [ 50 0 R 51 0 R 52 0 R 53 0 R 54 0 R 55 0 R 56 0 R 57 0 R 58 0 R 59 0 R ]
    >>
    /Type /Catalog
  >>
endobj


2 0 obj
  <<
    /Count 1
    /Kids [
      3 0 R
    ]
    /Type /Pages
  >>
endobj


3 0 obj
  <<
    /Annots 20 0 R
    /Contents 4 0 R
    /MediaBox [ 0 0 612 792 ]
    /Parent 2 0 R
    /Resources <<
      /Font << /F1 5 0 R >>
    >>
    /Type /Page
  >>
endobj


4 0 obj
  << >>
  stream
  endstream
endobj


5 0 obj
  <<
    /BaseFont /Helvetica
    /Encoding /WinAnsiEncoding
    /Subtype /Type1
    /Type /Font
  >>
endobj


20 0 obj
  [ 50 0 R 51 0 R 52 0 R 53 0 R 54 0 R 55 0 R 56 0 R 57 0 R 58 0 R 59 0 R ]
endobj


30 0 obj
  <<
    /JS 40 0 R
    /S /JavaScript
  >>
endobj


40 0 obj
  << >>
  stream
    const PDF_WIDTH  = 612;
    const PDF_HEIGHT = 792;
    const gameWidth  = 400;
    const gameHeight = 200;
    const ballSize   = 10;
    const barWidth   = 10;
    const barHeight  = 40;
    const rightBarX  = 476;
    const rightBarY  = 476;
    const leftBarX   = 136;
    const leftBarY   = 476;

    const TICK_INTERVAL = 50;
    const GAME_STEP_TIME = 100;
    const DIFFICULTY = 0.1;


    let timeMs = 0;
    let lastUpdate = 0;
    let interval = 0;
    let xDir = 1;
    let yDir = 1;
  
    const ball = {
      x: PDF_WIDTH/2,
      y: PDF_HEIGHT/2 + gameHeight/2,
      width: ballSize,
      height: ballSize,
      speed: ballSize,
    };

    const userBar = {
      x: rightBarX,
      y: rightBarY,
      width: barWidth,
      height: barHeight,
      score: 0,
    };

    const computerBar = {
      x: leftBarX,
      y: leftBarY,
      width: barWidth,
      height: barHeight,
      score: 0,
    };


    function setInterval(cb, ms) {
    	const evalStr = "(" + cb.toString() + ")();";
    	return app.setInterval(evalStr, ms);
    }

    function gameTick() {
    	timeMs += TICK_INTERVAL;
    	gameUpdate();
    }

    function gameUpdate() {
      if (timeMs >= GAME_STEP_TIME + lastUpdate) {
        moveBall(); 
        lastUpdate = timeMs;
    	}
    }

    function moveBall() {
      handleCollision();
      redraw(); 
    }

    function redraw() {
      this.getField("Ball").hidden = true;
      this.getField("Ball").rect = [
        ball.x, ball.y, ball.x + ball.width, ball.y + ball.width
      ];
      this.getField("Ball").hidden = false;

      this.getField("Right_bar").hidden = true;
      this.getField("Right_bar").rect = [
        userBar.x, userBar.y, userBar.x + userBar.width, userBar.y + userBar.height,
      ];
      this.getField("Right_bar").hidden = false;

      this.getField("Left_bar").hidden = true;
      this.getField("Left_bar").rect = [
        computerBar.x, computerBar.y, computerBar.x + computerBar.width, computerBar.y + computerBar.height,
      ];
      this.getField("Left_bar").hidden = false;
    }

    function handleCollision() {

      if (
        ball.y <= PDF_HEIGHT/ 2 || 
        ball.y + ball.width >= PDF_HEIGHT/2 + gameHeight
      ) {
        yDir = -1 * yDir;
      } 

      if (ball.x + ball.width >= PDF_WIDTH/2 + gameWidth/2) {
        computerBar.score += 1;
        this.getField("Left_score").value = computerBar.score;
        resetBall(); 

      } else if (ball.x <= PDF_WIDTH/2 - gameWidth/2) {
        userBar.score += 1;
        this.getField("Right_score").value = userBar.score;
        resetBall();
      }

     
      if (isCollision(userBar, ball)) {
        if (ball.x + ball.width == userBar.x) {
          xDir = -1 * xDir; 
        } else if (
            ball.y == userBar.y + userBar.height || 
            ball.y + ball.height == userBar.y
          ) {
          yDir = -1 * yDir;
        }

      } else if (isCollision(computerBar, ball)) {
        if (ball.x == computerBar.x + computerBar.width) {
          xDir = -1 * xDir; 
        } else if (
          ball.y == computerBar.y + computerBar.height ||
          ball.y + ball.height == computerBar.y
        ) {
          yDir = -1 * yDir;
        }
      }

      
      ball.x += ball.speed * xDir;
      ball.y += ball.speed * yDir;
      moveComputerBar();
    }

    function isCollision(shape1, shape2) {
      return (shape1.x + shape1.width >= shape2.x 
        && shape1.x <= shape2.x + shape2.width
        && shape1.y <= shape2.y + shape2.height 
        && shape1.y + shape1.height >= shape2.y
      );
    }

    function resetBall() {
      ball.x = PDF_WIDTH/2;
      ball.y = PDF_HEIGHT/2 + gameHeight/2;
      const randDir = Math.random() < 0.5 ? -1 : 1;
      xDir = -1 * xDir;
      yDir = randDir * yDir; 
    }

    function handleInput(event) {
    	switch (event.change) {
    		case 'w': userBarUp(); break;
    		case 's': userBarDown(); break;
    		// case 'a': computerBarUp(); break;
    		// case 'd': computerBarDown(); break;
    	}
    }

    function userBarUp() {
      if (userBar.y + userBar.height < PDF_HEIGHT/2 + gameHeight) {
        userBar.y += ball.width;
      } 
    }

    function computerBarUp() {
      if (computerBar.y + computerBar.height < PDF_HEIGHT/2 + gameHeight) {
        computerBar.y += ball.width;
      } 
    }
    
    function userBarDown() {
      if (userBar.y > PDF_HEIGHT/2) {
        userBar.y -= ball.width;
      }
    }
 
    function computerBarDown() {
      if (computerBar.y > PDF_HEIGHT/2) {
        computerBar.y -= ball.width;
      }
    }

    function moveComputerBar() {
      const nextLocation = computerBar.y + ((ball.y - (computerBar.y + computerBar.height/ 2))) * DIFFICULTY;
      if (nextLocation > PDF_HEIGHT/2 &&  
         nextLocation + computerBar.height < PDF_HEIGHT/2 + gameHeight
      ) {
        computerBar.y = nextLocation;
      }
    }

    interval = setInterval(gameTick, TICK_INTERVAL);

    function alert(message) {
      app.alert(message);
    }
  endstream
endobj


% ###FIELDS###


50 0 obj
<<
  /FT /Btn
  /Ff 1
  /MK <<
    /BG [
      0.8 
    ]
    /BC [
      0 0 0
    ]
  >>
  /Border [ 0 0 1 ]
  /P 3 0 R
  /Rect [
    106 396 506 596 
  ]
  /Subtype /Widget
  /T (Game_World)
  /Type /Annot
>>
endobj

51 0 obj
<<
  /FT /Btn
  /Ff 1
  /MK <<
    /BG [
      0 
    ]
    /BC [
      0 0 0
    ]
  >>
  /Border [ 0 0 1 ]
  /P 3 0 R
  /Rect [
    306 496 316 506 
  ]
  /Subtype /Widget
  /T (Ball)
  /Type /Annot
>>
endobj

52 0 obj
<<
  /FT /Btn
  /Ff 1
  /MK <<
    /BG [
      0 
    ]
    /BC [
      0 0 0
    ]
  >>
  /Border [ 0 0 1 ]
  /P 3 0 R
  /Rect [
    476 476 486 516 
  ]
  /Subtype /Widget
  /T (Right_bar)
  /Type /Annot
>>
endobj

53 0 obj
<<
  /FT /Btn
  /Ff 1
  /MK <<
    /BG [
      0 
    ]
    /BC [
      0 0 0
    ]
  >>
  /Border [ 0 0 1 ]
  /P 3 0 R
  /Rect [
    136 476 146 516 
  ]
  /Subtype /Widget
  /T (Left_bar)
  /Type /Annot
>>
endobj

54 0 obj
  << >>
  stream
    handleInput(event);
  endstream
  endobj

55 0 obj
<<
	/AA <<
		/K <<
			/JS 54 0 R
			/S /JavaScript
		>>
	>>
	/F 4
	/FT /Tx
	/MK <<
	>>
	/MaxLen 0
	/P 16 0 R
	/Rect [
	  106 296 506 346	
	]
	/Subtype /Widget
	/T (T_input)
	/V (Type here for keyboard controls (WA))
	/Type /Annot
>>
endobj

56 0 obj
  << >>
  stream
    
  endstream
  endobj

57 0 obj
<<
	/AA <<
		/K <<
			/JS 56 0 R
			/S /JavaScript
		>>
	>>
	/F 4
	/FT /Tx
	/MK <<
	>>
	/MaxLen 0
	/P 16 0 R
	/Rect [
	  382.5 636 432.5 686	
	]
	/Subtype /Widget
	/T (Right_score)
	/V (0)
	/Type /Annot
>>
endobj

58 0 obj
  << >>
  stream
    
  endstream
  endobj

59 0 obj
<<
	/AA <<
		/K <<
			/JS 58 0 R
			/S /JavaScript
		>>
	>>
	/F 4
	/FT /Tx
	/MK <<
	>>
	/MaxLen 0
	/P 16 0 R
	/Rect [
	  153 636 203 686	
	]
	/Subtype /Widget
	/T (Left_score)
	/V (0)
	/Type /Annot
>>
endobj




trailer
  <<
    /Root 1 0 R
  >>

%%EOF
